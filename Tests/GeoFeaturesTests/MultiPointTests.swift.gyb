%{

# Parameters
#
#   FileName: The name of the target file
#   GeometryType: The name of the geometry type this test is testing. eg. LineString
#

Self = FileName.replace('+', '_').split('.')[0]

Variants = [
    ('Coordinate2D', 'FloatingPrecision', '()', 'Cartesian', '()', '(x: 1.0, y: 1.0)', '(x: 2.0, y: 2.0)','(x: 1.0, y: 1.0)', '(x: 2.0, y: 2.0)'),
    ('Coordinate2DM','FloatingPrecision', '()', 'Cartesian', '()', '(x: 1.0, y: 1.0, m: 1.0)', '(x: 2.0, y: 2.0, m: 2.0)','(x: 1.0, y: 1.0, m: 1.0)', '(x: 2.0, y: 2.0, m: 2.0)'),
    ('Coordinate3D', 'FloatingPrecision', '()', 'Cartesian', '()', '(x: 1.0, y: 1.0, z: 1.0)', '(x: 2.0, y: 2.0, z: 2.0)','(x: 1.0, y: 1.0, z: 1.0)', '(x: 2.0, y: 2.0, z: 2.0)'),
    ('Coordinate3DM','FloatingPrecision', '()', 'Cartesian', '()', '(x: 1.0, y: 1.0, z: 1.0, m: 1.0)', '(x: 2.0, y: 2.0, z: 2.0, m: 2.0)','(x: 1.0, y: 1.0, z: 1.0, m: 1.0)', '(x: 2.0, y: 2.0, z: 2.0, m: 2.0)'),

    ('Coordinate2D', 'FixedPrecision', '(scale: 100)', 'Cartesian', '()', '(x: 1.001, y: 1.001)', '(x: 2.002, y: 2.002)','(x: 1.0, y: 1.0)', '(x: 2.0, y: 2.0)'),
    ('Coordinate2DM','FixedPrecision', '(scale: 100)', 'Cartesian', '()', '(x: 1.001, y: 1.001, m: 1.001)', '(x: 2.002, y: 2.002, m: 2.002)','(x: 1.0, y: 1.0, m: 1.0)', '(x: 2.0, y: 2.0, m: 2.0)'),
    ('Coordinate3D', 'FixedPrecision', '(scale: 100)', 'Cartesian', '()', '(x: 1.001, y: 1.001, z: 1.001)', '(x: 2.002, y: 2.002, z: 2.002)','(x: 1.0, y: 1.0, z: 1.0)', '(x: 2.0, y: 2.0, z: 2.0)'),
    ('Coordinate3DM','FixedPrecision', '(scale: 100)', 'Cartesian', '()', '(x: 1.001, y: 1.001, z: 1.001, m: 1.001)', '(x: 2.002, y: 2.002, z: 2.002, m: 2.002)','(x: 1.0, y: 1.0, z: 1.0, m: 1.0)', '(x: 2.0, y: 2.0, z: 2.0, m: 2.0)'),
]

}%
/*
 *   ${Self}Tests.swift
 *
 *   Copyright 2016 Tony Stone
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *   Created by Tony Stone on 3/6/16.
 */
import XCTest

import GeoFeatures

/*
    NOTE: This file was auto generated by gyb from file MultiPointTests.swift.gyb using the following command.

../bin/gyb --line-directive '' -DGeometryType=${GeometryType} -DFileName=${FileName} -o MultiPointTests.swift MultiPointTests.swift.gyb

    Do NOT edit this file directly as it will be regenerated automatically when needed.
*/
% for (CoordinateType, PrecisionType, PrecisionParameters, ReferenceSystemType, ReferenceSystemParameters, TestTuple0, TestTuple1, ExpectedTuple0, ExpectedTuple1) in Variants:
%{

Precision = PrecisionType + PrecisionParameters

CoordinateReferenceSystem = ReferenceSystemType + ReferenceSystemParameters

FunctionQualifier = CoordinateType + '_' + PrecisionType + '_' + ReferenceSystemType

}%

// MARK: - ${CoordinateType}, ${PrecisionType}, ${ReferenceSystemType} -

class ${Self}_${FunctionQualifier}_Tests : XCTestCase {

    let precision = ${Precision}
    let crs       = Cartesian()

    func testInit_NoArg ()   {
        XCTAssertEqual(MultiPoint<${CoordinateType}>(precision: precision, coordinateReferenceSystem: crs).isEmpty, true)
    }
    
    func testInit_Tuple () {
        let geometry = MultiPoint<${CoordinateType}>(elements: [Point(coordinate: ${TestTuple0}),Point(coordinate: ${TestTuple1})], precision: precision, coordinateReferenceSystem: crs)
        let expected = [Point<${CoordinateType}>(coordinate: ${ExpectedTuple0}),Point<${CoordinateType}>(coordinate: ${ExpectedTuple1})]

        XCTAssertTrue(
            (geometry.elementsEqual(expected)
                { (lhs: Point<${CoordinateType}>, rhs: Point<${CoordinateType}>) -> Bool in
                    return lhs == rhs
            }
        ), "\(geometry) is not equal to \(expected)")
    }

    func testSubscript_Get () {
        let geometry = MultiPoint<${CoordinateType}>(elements: [Point(coordinate: ${TestTuple0}),Point(coordinate: ${TestTuple1})], precision: precision, coordinateReferenceSystem: crs)
        
        XCTAssertEqual(geometry[1], Point<${CoordinateType}>(coordinate: ${ExpectedTuple1}))
    }
    
    func testSubscript_Set () {
        var geometry = MultiPoint<${CoordinateType}>(elements: [Point(coordinate: ${TestTuple0}),Point(coordinate: ${TestTuple1})], precision: precision, coordinateReferenceSystem: crs)
        
        geometry[1] = Point(coordinate: ${TestTuple0})
        
        XCTAssertEqual(geometry[1], Point<${CoordinateType}>(coordinate: ${ExpectedTuple0}))
    }
    
    func testAppend_MultiPoint () {
        
        let geometry1 = MultiPoint<${CoordinateType}>(elements: [Point(coordinate: ${TestTuple0}),Point(coordinate: ${TestTuple1})], precision: precision, coordinateReferenceSystem: crs)
        var geometry2 = MultiPoint<${CoordinateType}>(precision: precision, coordinateReferenceSystem: crs)
        
        geometry2.append(contentsOf: geometry1)
        
        XCTAssertEqual(geometry1, geometry2)
    }
    
    func testAppend_Array () {
        
        var geometry = MultiPoint<${CoordinateType}>(precision: precision, coordinateReferenceSystem: crs)
        let expected = [Point<${CoordinateType}>(coordinate: ${ExpectedTuple0}),Point<${CoordinateType}>(coordinate: ${ExpectedTuple1})]

        geometry.append(contentsOf: [Point(coordinate: ${TestTuple0}),Point(coordinate: ${TestTuple1})])
        
        XCTAssertTrue(geometry.elementsEqual(expected) { (lhs: Point<${CoordinateType}>, rhs: Point<${CoordinateType}>) -> Bool in
            return lhs == rhs
        }, "\(geometry) is not equal to \(expected)")
    }

    func testEquals () {
        XCTAssertEqual(MultiPoint<${CoordinateType}>(elements: [Point(coordinate: ${TestTuple0}),Point(coordinate: ${TestTuple1})], precision: precision, coordinateReferenceSystem: crs).equals(MultiPoint<${CoordinateType}>(elements: [Point(coordinate: ${TestTuple0}),Point(coordinate: ${TestTuple1})], precision: precision, coordinateReferenceSystem: crs)), true)
    }

    func testIsEmpty () {
        XCTAssertEqual(MultiPoint<${CoordinateType}>(precision: precision, coordinateReferenceSystem: crs).isEmpty(), true)
    }
    
    func testIsEmpty_False() {
        XCTAssertEqual(MultiPoint<${CoordinateType}>(elements: [Point(coordinate: ${TestTuple0}),Point(coordinate: ${TestTuple1})], precision: precision, coordinateReferenceSystem: crs).isEmpty(), false)
    }
    
    func testCount () {
        XCTAssertEqual(MultiPoint<${CoordinateType}>(elements: [Point(coordinate: ${TestTuple0}),Point(coordinate: ${TestTuple1})], precision: precision, coordinateReferenceSystem: crs).count, 2)
    }
    
    func testAppend () {
        var geometry = MultiPoint<${CoordinateType}>(precision: precision, coordinateReferenceSystem: crs)
        let expected = [Point<${CoordinateType}>(coordinate: ${ExpectedTuple0})]

        geometry.append(Point(coordinate: ${TestTuple0}))
        
        XCTAssertTrue(geometry.elementsEqual(expected)
            { (lhs: Point<${CoordinateType}>, rhs: Point<${CoordinateType}>) -> Bool in
                return lhs == rhs
        }, "\(geometry) is not equal to \(expected)")
    }

    func testRemoveAll () {
        var geometry = MultiPoint<${CoordinateType}>(elements: [Point(coordinate: ${TestTuple0}),Point(coordinate: ${TestTuple1})], precision: precision, coordinateReferenceSystem: crs)

        geometry.removeAll()

        XCTAssertEqual(geometry.isEmpty(), true)
    }
}
%end
