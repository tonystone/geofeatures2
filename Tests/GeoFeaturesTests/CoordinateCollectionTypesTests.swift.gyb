%{

# Parameters
#
#   FileName: The name of the target file
#   GeometryType: The name of the geometry type this test is testing. eg. LineString
#

Self = FileName.replace('+', '').split('.')[0]

Variants = [
    ('Coordinate2D', 'FloatingPrecision', '()', 'Cartesian', '()', '(x: 1.0, y: 1.0)', '(x: 2.0, y: 2.0)','(x: 1.0, y: 1.0)', '(x: 2.0, y: 2.0)'),
    ('Coordinate2DM','FloatingPrecision', '()', 'Cartesian', '()', '(x: 1.0, y: 1.0, m: 1.0)', '(x: 2.0, y: 2.0, m: 2.0)', '(x: 1.0, y: 1.0, m: 1.0)', '(x: 2.0, y: 2.0, m: 2.0)'),
    ('Coordinate3D', 'FloatingPrecision', '()', 'Cartesian', '()', '(x: 1.0, y: 1.0, z: 1.0)', '(x: 2.0, y: 2.0, z: 2.0)', '(x: 1.0, y: 1.0, z: 1.0)', '(x: 2.0, y: 2.0, z: 2.0)'),
    ('Coordinate3DM','FloatingPrecision', '()', 'Cartesian', '()', '(x: 1.0, y: 1.0, z: 1.0, m: 1.0)', '(x: 2.0, y: 2.0, z: 2.0, m: 2.0)','(x: 1.0, y: 1.0, z: 1.0, m: 1.0)', '(x: 2.0, y: 2.0, z: 2.0, m: 2.0)'),

    ('Coordinate2D', 'FixedPrecision', '(scale: 100)', 'Cartesian', '()', '(x: 1.001, y: 1.001)', '(x: 2.002, y: 2.002)', '(x: 1.0, y: 1.0)', '(x: 2.0, y: 2.0)'),
    ('Coordinate2DM','FixedPrecision', '(scale: 100)', 'Cartesian', '()', '(x: 1.001, y: 1.001, m: 1.001)', '(x: 2.002, y: 2.002, m: 2.002)', '(x: 1.0, y: 1.0, m: 1.0)', '(x: 2.0, y: 2.0, m: 2.0)'),
    ('Coordinate3D', 'FixedPrecision', '(scale: 100)', 'Cartesian', '()', '(x: 1.001, y: 1.001, z: 1.001)', '(x: 2.002, y: 2.002, z: 2.002)', '(x: 1.0, y: 1.0, z: 1.0)', '(x: 2.0, y: 2.0, z: 2.0)'),
    ('Coordinate3DM','FixedPrecision', '(scale: 100)', 'Cartesian', '()', '(x: 1.001, y: 1.001, z: 1.001, m: 1.001)', '(x: 2.002, y: 2.002, z: 2.002, m: 2.002)', '(x: 1.0, y: 1.0, z: 1.0, m: 1.0)', '(x: 2.0, y: 2.0, z: 2.0, m: 2.0)'),
]

}%
///
///  ${Self}Tests.swift
///
///  Copyright (c) 2016 Tony Stone
///
///  Licensed under the Apache License, Version 2.0 (the "License");
///  you may not use this file except in compliance with the License.
///  You may obtain a copy of the License at
///
///  http://www.apache.org/licenses/LICENSE-2.0
///
///  Unless required by applicable law or agreed to in writing, software
///  distributed under the License is distributed on an "AS IS" BASIS,
///  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
///  See the License for the specific language governing permissions and
///  limitations under the License.
///
///  Created by Tony Stone on 2/10/2016.
///
import XCTest
@testable import GeoFeatures

///
/// NOTE: This file was auto generated by gyb from file CoordinateCollectionTypesTests.swift.gyb using the following command.
///
/// gyb --line-directive '' -DGeometryType=${GeometryType} -o ${FileName} CoordinateCollectionTypesTests.swift.gyb
///
/// Do NOT edit this file directly as it will be regenerated automatically when needed.
///
% for (CoordinateType, PrecisionType, PrecisionParameters, ReferenceSystemType, ReferenceSystemParameters, TestCoordinate0, TestCoordinate1, ExpectedCoordinate0, ExpectedCoordinate1) in Variants:
%{

Precision = PrecisionType + PrecisionParameters

CoordinateSystem = ReferenceSystemType + ReferenceSystemParameters

FunctionQualifier = CoordinateType + PrecisionType + ReferenceSystemType

}%

// MARK: - Coordinate, ${PrecisionType}, ${ReferenceSystemType} -

class ${Self}${FunctionQualifier}Tests: XCTestCase {

    let precision = ${Precision}
    let cs        = ${CoordinateSystem}

    // MARK: Construction

    func testInitWithPrecisionAndCRS() {

        XCTAssertEqual(${GeometryType}(precision: precision, coordinateSystem: cs).isEmpty, true)
    }

    func testInitWithPrecision() {

        XCTAssertEqual(${GeometryType}(precision: precision).precision as? ${PrecisionType}, precision)
    }

    func testInitWithCRS() {

        XCTAssertEqual(${GeometryType}(coordinateSystem: cs).coordinateSystem as? ${ReferenceSystemType}, cs)
    }

    func testInitConverting() {

        let input = ${GeometryType}(converting: ${GeometryType}([Coordinate${TestCoordinate0}, Coordinate${TestCoordinate1}]), precision: precision, coordinateSystem: cs)
        let expected = ${GeometryType}([Coordinate${ExpectedCoordinate0}, Coordinate${ExpectedCoordinate1}], precision: precision, coordinateSystem: cs)

        XCTAssertTrue(
            (input.elementsEqual(expected) { (lhs: Coordinate, rhs: Coordinate) -> Bool in
                    return lhs == rhs
            }
        ), "\(input) is not equal to \(expected)")
    }

    func testInitCopy() {

        let input = ${GeometryType}(other: ${GeometryType}([Coordinate${TestCoordinate0}, Coordinate${TestCoordinate1}]), precision: precision, coordinateSystem: cs)
        let expected = ${GeometryType}([Coordinate${ExpectedCoordinate0}, Coordinate${ExpectedCoordinate1}], precision: precision, coordinateSystem: cs)

        XCTAssertTrue(
            (input.elementsEqual(expected) { (lhs: Coordinate, rhs: Coordinate) -> Bool in
                    return lhs == rhs
            }
        ), "\(input) is not equal to \(expected)")
    }

    func testInitWithArrayLiteral() {
        let input: ${GeometryType} = [Coordinate${TestCoordinate0}, Coordinate${TestCoordinate1}]
        let expected = ${GeometryType}([Coordinate${TestCoordinate0}, Coordinate${TestCoordinate1}])

        XCTAssertTrue(
            (input.elementsEqual(expected) { (lhs: Coordinate, rhs: Coordinate) -> Bool in
                    return lhs == rhs
            }
        ), "\(input) is not equal to \(expected)")
    }

    // MARK: CustomStringConvertible & CustomDebugStringConvertible

    func testDescription() {

        let input = ${GeometryType}([Coordinate${TestCoordinate0}, Coordinate${TestCoordinate1}], precision: precision, coordinateSystem: cs)
        let expected = "${GeometryType}([${ExpectedCoordinate0}, ${ExpectedCoordinate1}])"

        XCTAssertEqual(input.description, expected)
    }

    func testDebugDescription() {

        let input = ${GeometryType}([Coordinate${TestCoordinate0}, Coordinate${TestCoordinate1}], precision: precision, coordinateSystem: cs)
        let expected = "${GeometryType}([${ExpectedCoordinate0}, ${ExpectedCoordinate1}])"

        XCTAssertEqual(input.debugDescription, expected)
    }

    // MARK: MutableCollection Conformance

    func testStartIndex() {

        let input    = ${GeometryType}([Coordinate${TestCoordinate0}, Coordinate${TestCoordinate1}], precision: precision, coordinateSystem: cs)
        let expected = 0

        XCTAssertEqual(input.startIndex, expected)
    }

    func testEndIndex() {

        let input    = ${GeometryType}([Coordinate${TestCoordinate0}, Coordinate${TestCoordinate1}], precision: precision, coordinateSystem: cs)
        let expected = 2

        XCTAssertEqual(input.endIndex, expected)
    }

    func testIndexAfter() {

        let input    = 0
        let expected = 1

        XCTAssertEqual(${GeometryType}([Coordinate${TestCoordinate0}, Coordinate${TestCoordinate1}], precision: precision, coordinateSystem: cs).index(after: input), expected)
    }

    func testSubscriptGet() {

        let input = ${GeometryType}([Coordinate${TestCoordinate0}, Coordinate${TestCoordinate1}], precision: precision, coordinateSystem: cs)

        XCTAssertEqual(input[1], Coordinate${ExpectedCoordinate1})
    }

    func testSubscriptSet() {

        var input = ${GeometryType}([Coordinate${TestCoordinate0}, Coordinate${TestCoordinate1}], precision: precision, coordinateSystem: cs)

        input[1] = Coordinate${TestCoordinate0}

        XCTAssertEqual(input[1], Coordinate${ExpectedCoordinate0})
    }

    // MARK: RangeReplaceableCollection Conformance

    func testReplaceSubrangeAppend() {

        var input = (geometry: ${GeometryType}(precision: precision, coordinateSystem: cs), newElements: [Coordinate${TestCoordinate0}])
        let expected = [Coordinate${ExpectedCoordinate0}]

        input.geometry.replaceSubrange(0..<0, with: input.newElements)

        XCTAssertTrue(input.geometry.elementsEqual(expected) { (lhs: Coordinate, rhs: Coordinate) -> Bool in
                return lhs == rhs
        }, "\(input) is not equal to \(expected)")
    }

    func testReplaceSubrangeInsert() {

        var input = (geometry: ${GeometryType}([Coordinate${TestCoordinate0}, Coordinate${TestCoordinate1}], precision: precision, coordinateSystem: cs), newElements: [Coordinate${TestCoordinate1}])
        let expected = [Coordinate${ExpectedCoordinate1}, Coordinate${ExpectedCoordinate0}, Coordinate${ExpectedCoordinate1}]

        input.geometry.replaceSubrange(0..<0, with: input.newElements)

        XCTAssertTrue(input.geometry.elementsEqual(expected) { (lhs: Coordinate, rhs: Coordinate) -> Bool in
                return lhs == rhs
            }, "\(input) is not equal to \(expected)")
    }

    func testReplaceSubrangeReplace() {

        var input = (geometry: ${GeometryType}([Coordinate${TestCoordinate0}, Coordinate${TestCoordinate0}], precision: precision, coordinateSystem: cs), newElements: [Coordinate${TestCoordinate1}])
        let expected = [Coordinate${ExpectedCoordinate1}, Coordinate${ExpectedCoordinate0}]

        input.geometry.replaceSubrange(0..<1, with: input.newElements)

        XCTAssertTrue(input.geometry.elementsEqual(expected) { (lhs: Coordinate, rhs: Coordinate) -> Bool in
                return lhs == rhs
            }, "\(input) is not equal to \(expected)")
    }

    func testEquals() {

        XCTAssertEqual(${GeometryType}([Coordinate${TestCoordinate0}, Coordinate${TestCoordinate1}], precision: precision, coordinateSystem: cs).equals(${GeometryType}([Coordinate${ExpectedCoordinate0}, Coordinate${ExpectedCoordinate1}], precision: precision, coordinateSystem: cs)), true)
    }

    func testIsEmpty() {

        XCTAssertEqual(${GeometryType}(precision: precision, coordinateSystem: cs).isEmpty(), true)
    }

    func testIsEmptyFalse() {

        XCTAssertEqual(${GeometryType}([Coordinate${TestCoordinate0}, Coordinate${TestCoordinate1}], precision: precision, coordinateSystem: cs).isEmpty(), false)
    }

    func testCount() {

        XCTAssertEqual(${GeometryType}([Coordinate${TestCoordinate0}, Coordinate${TestCoordinate1}], precision: precision, coordinateSystem: cs).count, 2)
    }
}
%end
