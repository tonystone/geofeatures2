%{

# Parameters
#
#   TestInput:  The name of the Input python module that defines the inputs below.
#

import importlib

# Import the configuration to create the tests
input = importlib.import_module(TestInput)

# Force a reload fo the module since these change so frequently
reload(input)

#
# Input Values
#
#

# Redefine the variables into this name space
GeometryClass         = input.GeometryClass
GeometryIsGeneric     = input.GeometryIsGeneric
GeometryElementType   = input.GeometryElementType
ElementCast           = input.ElementCast
ElementArrayCast      = input.ElementArrayCast
Variants              = input.Variants

}%
///
///  ${GeometryClass}Tests.swift
///
///  Copyright (c) 2016 Tony Stone
///
///  Licensed under the Apache License, Version 2.0 (the "License");
///  you may not use this file except in compliance with the License.
///  You may obtain a copy of the License at
///
///  http://www.apache.org/licenses/LICENSE-2.0
///
///  Unless required by applicable law or agreed to in writing, software
///  distributed under the License is distributed on an "AS IS" BASIS,
///  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
///  See the License for the specific language governing permissions and
///  limitations under the License.
///
///  Created by Tony Stone on 3/6/2016.
///
import XCTest
import GeoFeatures

#if (os(OSX) || os(iOS) || os(tvOS) || os(watchOS)) && SWIFT_PACKAGE
    /// TODO: Remove this after figuring out why there seems to be a symbol conflict (error: cannot specialize a non-generic definition) with another Polygon on Swift PM on Apple platforms only.
    import struct GeoFeatures.Polygon
#endif

///
/// NOTE: This file was auto generated by gyb from file GeometryCollectionTypesTests.swift.gyb using the following command.
///
/// ../bin/gyb --line-directive '' -DTestInput='${TestInput}' -o ${GeometryClass}Tests.swift GeometryCollectionTypesTests.swift.gyb
///
/// Do NOT edit this file directly as it will be regenerated automatically when needed.
///
% for (CoordinateType, PrecisionType, PrecisionParameters, ReferenceSystemType, ReferenceSystemParameters, TestElement1, ExpectedElement1, ExpectedElementDescription1, TestElement2, ExpectedElement2, ExpectedElementDescription2) in Variants:
%{

GeometryType = GeometryClass

Precision        = PrecisionType + PrecisionParameters
CoordinateSystem = ReferenceSystemType + ReferenceSystemParameters
ClassQualifier   = CoordinateType + PrecisionType + ReferenceSystemType
}%

// MARK: - ${CoordinateType}, ${PrecisionType}, ${ReferenceSystemType} -

class ${GeometryClass}${ClassQualifier}Tests: XCTestCase {

    let precision = ${Precision}
    let cs        = ${CoordinateSystem}

    // MARK: Construction

    func testInitWithNoArg() {
        let input = ${GeometryType}()

        XCTAssertTrue(input.isEmpty())
    }

    func testInitWithNoArgAndDefaults() {
        let input    = ${GeometryType}()

        /// FIXME: Currently Precision and CoordinateSystem can not be Equitable and be used for anything other than Generic constraints because it's a protocol, this limits testing of the defaultPrecision and defaultCoordinateSystem
        /// XCTAssertEqual(input.precision as? ${PrecisionType}, GeoFeatures.defaultPrecision)
        XCTAssertEqual(input.coordinateSystem as? ${ReferenceSystemType}, GeoFeatures.defaultCoordinateSystem)
    }

    func testInitWithPrecisionAndCRS() {
        let input = ${GeometryType}(precision: precision, coordinateSystem: cs)

        XCTAssertEqual(input.precision as? ${PrecisionType}, precision)
        XCTAssertEqual(input.coordinateSystem as? ${ReferenceSystemType}, cs)
    }

    func testInitWithPrecision() {
        let input    = ${GeometryType}(precision: precision)
        let expected = precision

        XCTAssertEqual(input.precision as? ${PrecisionType}, expected)
    }

    func testInitWithCRS() {
        let input = ${GeometryType}(coordinateSystem: cs)
        let expected = cs

        XCTAssertEqual(input.coordinateSystem as? ${ReferenceSystemType}, expected)
    }

    // MARK: CustomStringConvertible & CustomDebugStringConvertible

    func testDescription() {

        let input    = ${GeometryType}(elements: [${TestElement1}, ${TestElement2}]${ElementArrayCast}, precision: precision, coordinateSystem: cs)
        let expected = "${GeometryType}(${ExpectedElementDescription1}, ${ExpectedElementDescription2})"

        XCTAssertEqual(input.description, expected)
    }

    func testDebugDescription() {

        let input    = ${GeometryType}(elements: [${TestElement1}, ${TestElement2}]${ElementArrayCast}, precision: precision, coordinateSystem: cs)
        let expected = "${GeometryType}(${ExpectedElementDescription1}, ${ExpectedElementDescription2})"

        XCTAssertEqual(input.debugDescription, expected)
    }

    // MARK: Collection conformance
% if GeometryClass not in ['GeometryCollection', 'MultiPolygon']:
    func testAppend() {

        var input    = ${GeometryType}(precision: precision, coordinateSystem: cs)
        let expected = [${ExpectedElement1}]${ElementArrayCast}

        input.append(${TestElement1})

        XCTAssertTrue(input.elementsEqual(expected))
    }
% end

    func testAppendContentsOf() {

        let input1 = ${GeometryType}(elements: [${TestElement1}, ${TestElement2}]${ElementArrayCast}, precision: precision, coordinateSystem: cs)
        var input2 = ${GeometryType}(precision: precision, coordinateSystem: cs)

        input2.append(contentsOf: input1)

        XCTAssertEqual(input1, input2)
    }
% if GeometryClass not in ['GeometryCollection', 'MultiPolygon']:
    func testInsert2ExistingElements() {

        var input = ${GeometryType}(elements: [${TestElement1}, ${TestElement2}]${ElementArrayCast}, precision: precision, coordinateSystem: cs)
        let expected = [${ExpectedElement2}, ${ExpectedElement1}, ${ExpectedElement2}]${ElementArrayCast}

        input.insert(${TestElement2}, at: 0)

        XCTAssertTrue(input.elementsEqual(expected))
    }

    func testInsert1ExistingElements() {

        var input = ${GeometryType}(elements: [${TestElement1}]${ElementArrayCast}, precision: precision, coordinateSystem: cs)
        let expected = [${ExpectedElement2}, ${ExpectedElement1}]${ElementArrayCast}

        input.insert(${TestElement2}, at: 0)

        XCTAssertTrue(input.elementsEqual(expected))
    }
% end

    // MARK: Swift.Collection Conformance

    func testSubscriptGet() {

        let input    = ${GeometryType}(elements: [${TestElement1}, ${TestElement2}]${ElementArrayCast}, precision: precision, coordinateSystem: cs)
        let expected = ${ExpectedElement2}${ElementCast}

        XCTAssertTrue(input[1].equals(expected))
    }

    func testSubscriptSet() {

        var input    = ${GeometryType}(elements: [${TestElement1}, ${TestElement2}]${ElementArrayCast}, precision: precision, coordinateSystem: cs)
        let expected = ${GeometryType}(elements: [${ExpectedElement1}, ${ExpectedElement1}]${ElementArrayCast}, precision: precision, coordinateSystem: cs)

        input[1] = ${TestElement1}${ElementCast}

        XCTAssertEqual(input, expected)
    }

    func testEquals() {

        let input    = ${GeometryType}(elements: [${TestElement1}, ${TestElement2}]${ElementArrayCast}, precision: precision, coordinateSystem: cs)
        let expected = ${GeometryType}(elements: [${ExpectedElement1}, ${ExpectedElement2}]${ElementArrayCast}, precision: precision, coordinateSystem: cs)

        XCTAssertEqual(input, expected)
    }

    func testIsEmpty() {

        let input = ${GeometryType}(precision: precision, coordinateSystem: cs)
        let expected = true

        XCTAssertEqual(input.isEmpty(), expected)
    }

    func testIsEmptyFalse() {

        let input    = ${GeometryType}(elements: [${TestElement1}, ${TestElement2}]${ElementArrayCast}, precision: precision, coordinateSystem: cs)
        let expected = false

        XCTAssertEqual(input.isEmpty(), expected)
    }

    func testCount() {

        let input    = ${GeometryType}(elements: [${TestElement1}, ${TestElement2}]${ElementArrayCast}, precision: precision, coordinateSystem: cs)
        let expected = 2

        XCTAssertEqual(input.count, expected)
    }
}
%end
