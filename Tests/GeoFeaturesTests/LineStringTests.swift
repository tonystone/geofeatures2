/*
 *   LineStringTests.swift
 *
 *   Copyright 2016 Tony Stone
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *   Created by Tony Stone on 2/10/16.
 */
import XCTest

import GeoFeatures

/*
    NOTE: This file was auto generated by gyb from file CoordinateCollectionTests.swift.gyb using the following command.

    gyb --line-directive '' -DGeometryType=LineString -o LineString.swift CoordinateCollectionTests.swift.gyb

    Do NOT edit this file directly as it will be regenerated automatically when needed.
*/

// MARK: - Coordinate2D, FloatingPrecision, Cartesian -

class LineString_Coordinate2D_FloatingPrecision_Cartesian_Tests : XCTestCase {

    let precision = FloatingPrecision()
    let crs       = Cartesian()

    func testInit_NoArg()   {
        XCTAssertEqual(LineString<Coordinate2D>(precision: precision, coordinateReferenceSystem: crs).isEmpty, true)
    }
    
    func testInit_Tuple() {
        let geometry = LineString<Coordinate2D>(elements: [(x: 1.0, y: 1.0),(x: 2.0, y: 2.0)], precision: precision, coordinateReferenceSystem: crs)
        let expected = [Coordinate2D(tuple: (x: 1.0, y: 1.0)), Coordinate2D(tuple: (x: 2.0, y: 2.0))]

        XCTAssertTrue(
            (geometry.elementsEqual(expected)
                { (lhs: Coordinate2D, rhs: Coordinate2D) -> Bool in
                    return lhs == rhs
            }
        ), "\(geometry) is not equal to \(expected)")
    }
    
    func testSubscript_Get() {
        let geometry = LineString<Coordinate2D>(elements: [(x: 1.0, y: 1.0),(x: 2.0, y: 2.0)], precision: precision, coordinateReferenceSystem: crs)
        
        XCTAssertEqual(geometry[1], Coordinate2D(tuple: (x: 2.0, y: 2.0)))
    }
    
    func testSubscript_Set() {
        var geometry = LineString<Coordinate2D>(elements: [(x: 1.0, y: 1.0),(x: 2.0, y: 2.0)], precision: precision, coordinateReferenceSystem: crs)
        
        geometry[1] = Coordinate2D(tuple: (x: 1.0, y: 1.0))
        
        XCTAssertEqual(geometry[1], Coordinate2D(tuple: (x: 1.0, y: 1.0)))
    }
    
    func testAppend_LineString() {
        
        let geometry1 = LineString<Coordinate2D>(elements: [(x: 1.0, y: 1.0),(x: 2.0, y: 2.0)], precision: precision, coordinateReferenceSystem: crs)
        var geometry2 = LineString<Coordinate2D>(precision: precision, coordinateReferenceSystem: crs)
        
        geometry2.append(contentsOf: geometry1)
        
        XCTAssertEqual(geometry1, geometry2)
    }
    
    func testAppend_Array() {
        
        var geometry = LineString<Coordinate2D>(precision: precision, coordinateReferenceSystem: crs)
        let expected = [Coordinate2D(tuple: (x: 1.0, y: 1.0)), Coordinate2D(tuple: (x: 2.0, y: 2.0))]

        geometry.append(contentsOf: [Coordinate2D(tuple: (x: 1.0, y: 1.0)), Coordinate2D(tuple: (x: 2.0, y: 2.0))])
        
        XCTAssertTrue(geometry.elementsEqual(expected) { (lhs: Coordinate2D, rhs: Coordinate2D) -> Bool in
            return lhs == rhs
        }, "\(geometry) is not equal to \(expected)")
    }

    func testEquals() {
        XCTAssertEqual(LineString<Coordinate2D>(elements: [Coordinate2D(tuple: (x: 1.0, y: 1.0)), Coordinate2D(tuple: (x: 2.0, y: 2.0))], precision: precision, coordinateReferenceSystem: crs).equals(LineString<Coordinate2D>(elements: [Coordinate2D(tuple: (x: 1.0, y: 1.0)), Coordinate2D(tuple: (x: 2.0, y: 2.0))], precision: precision, coordinateReferenceSystem: crs)), true)
    }
    
    func testIsEmpty() {
        XCTAssertEqual(LineString<Coordinate2D>(precision: precision, coordinateReferenceSystem: crs).isEmpty(), true)
    }
    
    func testIsEmpty_False() {
        XCTAssertEqual(LineString<Coordinate2D>(elements: [Coordinate2D(tuple: (x: 1.0, y: 1.0)), Coordinate2D(tuple: (x: 2.0, y: 2.0))], precision: precision, coordinateReferenceSystem: crs).isEmpty(), false)
    }
    
    func testCount() {
        XCTAssertEqual(LineString<Coordinate2D>(elements: [Coordinate2D(tuple: (x: 1.0, y: 1.0)), Coordinate2D(tuple: (x: 2.0, y: 2.0))], precision: precision, coordinateReferenceSystem: crs).count, 2)
    }
    
    func testAppend() {
        var geometry = LineString<Coordinate2D>(precision: precision, coordinateReferenceSystem: crs)
        let expected = [Coordinate2D(tuple: (x: 1.0, y: 1.0))]

        geometry.append((x: 1.0, y: 1.0))
        
        XCTAssertTrue(geometry.elementsEqual(expected)
            { (lhs: Coordinate2D, rhs: Coordinate2D) -> Bool in
                return lhs == rhs
        }, "\(geometry) is not equal to \(expected)")
    }

    func testInsert() {
        var geometry = LineString<Coordinate2D>(elements: [Coordinate2D(tuple: (x: 1.0, y: 1.0)), Coordinate2D(tuple: (x: 2.0, y: 2.0))], precision: precision, coordinateReferenceSystem: crs)
        let expected = [Coordinate2D(tuple: (x: 2.0, y: 2.0)), Coordinate2D(tuple: (x: 1.0, y: 1.0)), Coordinate2D(tuple: (x: 2.0, y: 2.0))]

        geometry.insert(Coordinate2D(tuple: (x: 2.0, y: 2.0)), atIndex: 0)

        XCTAssertTrue(geometry.elementsEqual(expected)
            { (lhs: Coordinate2D, rhs: Coordinate2D) -> Bool in
                return lhs == rhs
            }, "\(geometry) is not equal to \(expected)")
    }

    func testRemoveAll() {
        var geometry = LineString<Coordinate2D>(elements: [Coordinate2D(tuple: (x: 1.0, y: 1.0)), Coordinate2D(tuple: (x: 2.0, y: 2.0))], precision: precision, coordinateReferenceSystem: crs)

        geometry.removeAll()

        XCTAssertEqual(geometry.isEmpty(), true)
    }
}

// MARK: - Coordinate2DM, FloatingPrecision, Cartesian -

class LineString_Coordinate2DM_FloatingPrecision_Cartesian_Tests : XCTestCase {

    let precision = FloatingPrecision()
    let crs       = Cartesian()

    func testInit_NoArg()   {
        XCTAssertEqual(LineString<Coordinate2DM>(precision: precision, coordinateReferenceSystem: crs).isEmpty, true)
    }
    
    func testInit_Tuple() {
        let geometry = LineString<Coordinate2DM>(elements: [(x: 1.0, y: 1.0, m: 1.0),(x: 2.0, y: 2.0, m: 2.0)], precision: precision, coordinateReferenceSystem: crs)
        let expected = [Coordinate2DM(tuple: (x: 1.0, y: 1.0, m: 1.0)), Coordinate2DM(tuple: (x: 2.0, y: 2.0, m: 2.0))]

        XCTAssertTrue(
            (geometry.elementsEqual(expected)
                { (lhs: Coordinate2DM, rhs: Coordinate2DM) -> Bool in
                    return lhs == rhs
            }
        ), "\(geometry) is not equal to \(expected)")
    }
    
    func testSubscript_Get() {
        let geometry = LineString<Coordinate2DM>(elements: [(x: 1.0, y: 1.0, m: 1.0),(x: 2.0, y: 2.0, m: 2.0)], precision: precision, coordinateReferenceSystem: crs)
        
        XCTAssertEqual(geometry[1], Coordinate2DM(tuple: (x: 2.0, y: 2.0, m: 2.0)))
    }
    
    func testSubscript_Set() {
        var geometry = LineString<Coordinate2DM>(elements: [(x: 1.0, y: 1.0, m: 1.0),(x: 2.0, y: 2.0, m: 2.0)], precision: precision, coordinateReferenceSystem: crs)
        
        geometry[1] = Coordinate2DM(tuple: (x: 1.0, y: 1.0, m: 1.0))
        
        XCTAssertEqual(geometry[1], Coordinate2DM(tuple: (x: 1.0, y: 1.0, m: 1.0)))
    }
    
    func testAppend_LineString() {
        
        let geometry1 = LineString<Coordinate2DM>(elements: [(x: 1.0, y: 1.0, m: 1.0),(x: 2.0, y: 2.0, m: 2.0)], precision: precision, coordinateReferenceSystem: crs)
        var geometry2 = LineString<Coordinate2DM>(precision: precision, coordinateReferenceSystem: crs)
        
        geometry2.append(contentsOf: geometry1)
        
        XCTAssertEqual(geometry1, geometry2)
    }
    
    func testAppend_Array() {
        
        var geometry = LineString<Coordinate2DM>(precision: precision, coordinateReferenceSystem: crs)
        let expected = [Coordinate2DM(tuple: (x: 1.0, y: 1.0, m: 1.0)), Coordinate2DM(tuple: (x: 2.0, y: 2.0, m: 2.0))]

        geometry.append(contentsOf: [Coordinate2DM(tuple: (x: 1.0, y: 1.0, m: 1.0)), Coordinate2DM(tuple: (x: 2.0, y: 2.0, m: 2.0))])
        
        XCTAssertTrue(geometry.elementsEqual(expected) { (lhs: Coordinate2DM, rhs: Coordinate2DM) -> Bool in
            return lhs == rhs
        }, "\(geometry) is not equal to \(expected)")
    }

    func testEquals() {
        XCTAssertEqual(LineString<Coordinate2DM>(elements: [Coordinate2DM(tuple: (x: 1.0, y: 1.0, m: 1.0)), Coordinate2DM(tuple: (x: 2.0, y: 2.0, m: 2.0))], precision: precision, coordinateReferenceSystem: crs).equals(LineString<Coordinate2DM>(elements: [Coordinate2DM(tuple: (x: 1.0, y: 1.0, m: 1.0)), Coordinate2DM(tuple: (x: 2.0, y: 2.0, m: 2.0))], precision: precision, coordinateReferenceSystem: crs)), true)
    }
    
    func testIsEmpty() {
        XCTAssertEqual(LineString<Coordinate2DM>(precision: precision, coordinateReferenceSystem: crs).isEmpty(), true)
    }
    
    func testIsEmpty_False() {
        XCTAssertEqual(LineString<Coordinate2DM>(elements: [Coordinate2DM(tuple: (x: 1.0, y: 1.0, m: 1.0)), Coordinate2DM(tuple: (x: 2.0, y: 2.0, m: 2.0))], precision: precision, coordinateReferenceSystem: crs).isEmpty(), false)
    }
    
    func testCount() {
        XCTAssertEqual(LineString<Coordinate2DM>(elements: [Coordinate2DM(tuple: (x: 1.0, y: 1.0, m: 1.0)), Coordinate2DM(tuple: (x: 2.0, y: 2.0, m: 2.0))], precision: precision, coordinateReferenceSystem: crs).count, 2)
    }
    
    func testAppend() {
        var geometry = LineString<Coordinate2DM>(precision: precision, coordinateReferenceSystem: crs)
        let expected = [Coordinate2DM(tuple: (x: 1.0, y: 1.0, m: 1.0))]

        geometry.append((x: 1.0, y: 1.0, m: 1.0))
        
        XCTAssertTrue(geometry.elementsEqual(expected)
            { (lhs: Coordinate2DM, rhs: Coordinate2DM) -> Bool in
                return lhs == rhs
        }, "\(geometry) is not equal to \(expected)")
    }

    func testInsert() {
        var geometry = LineString<Coordinate2DM>(elements: [Coordinate2DM(tuple: (x: 1.0, y: 1.0, m: 1.0)), Coordinate2DM(tuple: (x: 2.0, y: 2.0, m: 2.0))], precision: precision, coordinateReferenceSystem: crs)
        let expected = [Coordinate2DM(tuple: (x: 2.0, y: 2.0, m: 2.0)), Coordinate2DM(tuple: (x: 1.0, y: 1.0, m: 1.0)), Coordinate2DM(tuple: (x: 2.0, y: 2.0, m: 2.0))]

        geometry.insert(Coordinate2DM(tuple: (x: 2.0, y: 2.0, m: 2.0)), atIndex: 0)

        XCTAssertTrue(geometry.elementsEqual(expected)
            { (lhs: Coordinate2DM, rhs: Coordinate2DM) -> Bool in
                return lhs == rhs
            }, "\(geometry) is not equal to \(expected)")
    }

    func testRemoveAll() {
        var geometry = LineString<Coordinate2DM>(elements: [Coordinate2DM(tuple: (x: 1.0, y: 1.0, m: 1.0)), Coordinate2DM(tuple: (x: 2.0, y: 2.0, m: 2.0))], precision: precision, coordinateReferenceSystem: crs)

        geometry.removeAll()

        XCTAssertEqual(geometry.isEmpty(), true)
    }
}

// MARK: - Coordinate3D, FloatingPrecision, Cartesian -

class LineString_Coordinate3D_FloatingPrecision_Cartesian_Tests : XCTestCase {

    let precision = FloatingPrecision()
    let crs       = Cartesian()

    func testInit_NoArg()   {
        XCTAssertEqual(LineString<Coordinate3D>(precision: precision, coordinateReferenceSystem: crs).isEmpty, true)
    }
    
    func testInit_Tuple() {
        let geometry = LineString<Coordinate3D>(elements: [(x: 1.0, y: 1.0, z: 1.0),(x: 2.0, y: 2.0, z: 2.0)], precision: precision, coordinateReferenceSystem: crs)
        let expected = [Coordinate3D(tuple: (x: 1.0, y: 1.0, z: 1.0)), Coordinate3D(tuple: (x: 2.0, y: 2.0, z: 2.0))]

        XCTAssertTrue(
            (geometry.elementsEqual(expected)
                { (lhs: Coordinate3D, rhs: Coordinate3D) -> Bool in
                    return lhs == rhs
            }
        ), "\(geometry) is not equal to \(expected)")
    }
    
    func testSubscript_Get() {
        let geometry = LineString<Coordinate3D>(elements: [(x: 1.0, y: 1.0, z: 1.0),(x: 2.0, y: 2.0, z: 2.0)], precision: precision, coordinateReferenceSystem: crs)
        
        XCTAssertEqual(geometry[1], Coordinate3D(tuple: (x: 2.0, y: 2.0, z: 2.0)))
    }
    
    func testSubscript_Set() {
        var geometry = LineString<Coordinate3D>(elements: [(x: 1.0, y: 1.0, z: 1.0),(x: 2.0, y: 2.0, z: 2.0)], precision: precision, coordinateReferenceSystem: crs)
        
        geometry[1] = Coordinate3D(tuple: (x: 1.0, y: 1.0, z: 1.0))
        
        XCTAssertEqual(geometry[1], Coordinate3D(tuple: (x: 1.0, y: 1.0, z: 1.0)))
    }
    
    func testAppend_LineString() {
        
        let geometry1 = LineString<Coordinate3D>(elements: [(x: 1.0, y: 1.0, z: 1.0),(x: 2.0, y: 2.0, z: 2.0)], precision: precision, coordinateReferenceSystem: crs)
        var geometry2 = LineString<Coordinate3D>(precision: precision, coordinateReferenceSystem: crs)
        
        geometry2.append(contentsOf: geometry1)
        
        XCTAssertEqual(geometry1, geometry2)
    }
    
    func testAppend_Array() {
        
        var geometry = LineString<Coordinate3D>(precision: precision, coordinateReferenceSystem: crs)
        let expected = [Coordinate3D(tuple: (x: 1.0, y: 1.0, z: 1.0)), Coordinate3D(tuple: (x: 2.0, y: 2.0, z: 2.0))]

        geometry.append(contentsOf: [Coordinate3D(tuple: (x: 1.0, y: 1.0, z: 1.0)), Coordinate3D(tuple: (x: 2.0, y: 2.0, z: 2.0))])
        
        XCTAssertTrue(geometry.elementsEqual(expected) { (lhs: Coordinate3D, rhs: Coordinate3D) -> Bool in
            return lhs == rhs
        }, "\(geometry) is not equal to \(expected)")
    }

    func testEquals() {
        XCTAssertEqual(LineString<Coordinate3D>(elements: [Coordinate3D(tuple: (x: 1.0, y: 1.0, z: 1.0)), Coordinate3D(tuple: (x: 2.0, y: 2.0, z: 2.0))], precision: precision, coordinateReferenceSystem: crs).equals(LineString<Coordinate3D>(elements: [Coordinate3D(tuple: (x: 1.0, y: 1.0, z: 1.0)), Coordinate3D(tuple: (x: 2.0, y: 2.0, z: 2.0))], precision: precision, coordinateReferenceSystem: crs)), true)
    }
    
    func testIsEmpty() {
        XCTAssertEqual(LineString<Coordinate3D>(precision: precision, coordinateReferenceSystem: crs).isEmpty(), true)
    }
    
    func testIsEmpty_False() {
        XCTAssertEqual(LineString<Coordinate3D>(elements: [Coordinate3D(tuple: (x: 1.0, y: 1.0, z: 1.0)), Coordinate3D(tuple: (x: 2.0, y: 2.0, z: 2.0))], precision: precision, coordinateReferenceSystem: crs).isEmpty(), false)
    }
    
    func testCount() {
        XCTAssertEqual(LineString<Coordinate3D>(elements: [Coordinate3D(tuple: (x: 1.0, y: 1.0, z: 1.0)), Coordinate3D(tuple: (x: 2.0, y: 2.0, z: 2.0))], precision: precision, coordinateReferenceSystem: crs).count, 2)
    }
    
    func testAppend() {
        var geometry = LineString<Coordinate3D>(precision: precision, coordinateReferenceSystem: crs)
        let expected = [Coordinate3D(tuple: (x: 1.0, y: 1.0, z: 1.0))]

        geometry.append((x: 1.0, y: 1.0, z: 1.0))
        
        XCTAssertTrue(geometry.elementsEqual(expected)
            { (lhs: Coordinate3D, rhs: Coordinate3D) -> Bool in
                return lhs == rhs
        }, "\(geometry) is not equal to \(expected)")
    }

    func testInsert() {
        var geometry = LineString<Coordinate3D>(elements: [Coordinate3D(tuple: (x: 1.0, y: 1.0, z: 1.0)), Coordinate3D(tuple: (x: 2.0, y: 2.0, z: 2.0))], precision: precision, coordinateReferenceSystem: crs)
        let expected = [Coordinate3D(tuple: (x: 2.0, y: 2.0, z: 2.0)), Coordinate3D(tuple: (x: 1.0, y: 1.0, z: 1.0)), Coordinate3D(tuple: (x: 2.0, y: 2.0, z: 2.0))]

        geometry.insert(Coordinate3D(tuple: (x: 2.0, y: 2.0, z: 2.0)), atIndex: 0)

        XCTAssertTrue(geometry.elementsEqual(expected)
            { (lhs: Coordinate3D, rhs: Coordinate3D) -> Bool in
                return lhs == rhs
            }, "\(geometry) is not equal to \(expected)")
    }

    func testRemoveAll() {
        var geometry = LineString<Coordinate3D>(elements: [Coordinate3D(tuple: (x: 1.0, y: 1.0, z: 1.0)), Coordinate3D(tuple: (x: 2.0, y: 2.0, z: 2.0))], precision: precision, coordinateReferenceSystem: crs)

        geometry.removeAll()

        XCTAssertEqual(geometry.isEmpty(), true)
    }
}

// MARK: - Coordinate3DM, FloatingPrecision, Cartesian -

class LineString_Coordinate3DM_FloatingPrecision_Cartesian_Tests : XCTestCase {

    let precision = FloatingPrecision()
    let crs       = Cartesian()

    func testInit_NoArg()   {
        XCTAssertEqual(LineString<Coordinate3DM>(precision: precision, coordinateReferenceSystem: crs).isEmpty, true)
    }
    
    func testInit_Tuple() {
        let geometry = LineString<Coordinate3DM>(elements: [(x: 1.0, y: 1.0, z: 1.0, m: 1.0),(x: 2.0, y: 2.0, z: 2.0, m: 2.0)], precision: precision, coordinateReferenceSystem: crs)
        let expected = [Coordinate3DM(tuple: (x: 1.0, y: 1.0, z: 1.0, m: 1.0)), Coordinate3DM(tuple: (x: 2.0, y: 2.0, z: 2.0, m: 2.0))]

        XCTAssertTrue(
            (geometry.elementsEqual(expected)
                { (lhs: Coordinate3DM, rhs: Coordinate3DM) -> Bool in
                    return lhs == rhs
            }
        ), "\(geometry) is not equal to \(expected)")
    }
    
    func testSubscript_Get() {
        let geometry = LineString<Coordinate3DM>(elements: [(x: 1.0, y: 1.0, z: 1.0, m: 1.0),(x: 2.0, y: 2.0, z: 2.0, m: 2.0)], precision: precision, coordinateReferenceSystem: crs)
        
        XCTAssertEqual(geometry[1], Coordinate3DM(tuple: (x: 2.0, y: 2.0, z: 2.0, m: 2.0)))
    }
    
    func testSubscript_Set() {
        var geometry = LineString<Coordinate3DM>(elements: [(x: 1.0, y: 1.0, z: 1.0, m: 1.0),(x: 2.0, y: 2.0, z: 2.0, m: 2.0)], precision: precision, coordinateReferenceSystem: crs)
        
        geometry[1] = Coordinate3DM(tuple: (x: 1.0, y: 1.0, z: 1.0, m: 1.0))
        
        XCTAssertEqual(geometry[1], Coordinate3DM(tuple: (x: 1.0, y: 1.0, z: 1.0, m: 1.0)))
    }
    
    func testAppend_LineString() {
        
        let geometry1 = LineString<Coordinate3DM>(elements: [(x: 1.0, y: 1.0, z: 1.0, m: 1.0),(x: 2.0, y: 2.0, z: 2.0, m: 2.0)], precision: precision, coordinateReferenceSystem: crs)
        var geometry2 = LineString<Coordinate3DM>(precision: precision, coordinateReferenceSystem: crs)
        
        geometry2.append(contentsOf: geometry1)
        
        XCTAssertEqual(geometry1, geometry2)
    }
    
    func testAppend_Array() {
        
        var geometry = LineString<Coordinate3DM>(precision: precision, coordinateReferenceSystem: crs)
        let expected = [Coordinate3DM(tuple: (x: 1.0, y: 1.0, z: 1.0, m: 1.0)), Coordinate3DM(tuple: (x: 2.0, y: 2.0, z: 2.0, m: 2.0))]

        geometry.append(contentsOf: [Coordinate3DM(tuple: (x: 1.0, y: 1.0, z: 1.0, m: 1.0)), Coordinate3DM(tuple: (x: 2.0, y: 2.0, z: 2.0, m: 2.0))])
        
        XCTAssertTrue(geometry.elementsEqual(expected) { (lhs: Coordinate3DM, rhs: Coordinate3DM) -> Bool in
            return lhs == rhs
        }, "\(geometry) is not equal to \(expected)")
    }

    func testEquals() {
        XCTAssertEqual(LineString<Coordinate3DM>(elements: [Coordinate3DM(tuple: (x: 1.0, y: 1.0, z: 1.0, m: 1.0)), Coordinate3DM(tuple: (x: 2.0, y: 2.0, z: 2.0, m: 2.0))], precision: precision, coordinateReferenceSystem: crs).equals(LineString<Coordinate3DM>(elements: [Coordinate3DM(tuple: (x: 1.0, y: 1.0, z: 1.0, m: 1.0)), Coordinate3DM(tuple: (x: 2.0, y: 2.0, z: 2.0, m: 2.0))], precision: precision, coordinateReferenceSystem: crs)), true)
    }
    
    func testIsEmpty() {
        XCTAssertEqual(LineString<Coordinate3DM>(precision: precision, coordinateReferenceSystem: crs).isEmpty(), true)
    }
    
    func testIsEmpty_False() {
        XCTAssertEqual(LineString<Coordinate3DM>(elements: [Coordinate3DM(tuple: (x: 1.0, y: 1.0, z: 1.0, m: 1.0)), Coordinate3DM(tuple: (x: 2.0, y: 2.0, z: 2.0, m: 2.0))], precision: precision, coordinateReferenceSystem: crs).isEmpty(), false)
    }
    
    func testCount() {
        XCTAssertEqual(LineString<Coordinate3DM>(elements: [Coordinate3DM(tuple: (x: 1.0, y: 1.0, z: 1.0, m: 1.0)), Coordinate3DM(tuple: (x: 2.0, y: 2.0, z: 2.0, m: 2.0))], precision: precision, coordinateReferenceSystem: crs).count, 2)
    }
    
    func testAppend() {
        var geometry = LineString<Coordinate3DM>(precision: precision, coordinateReferenceSystem: crs)
        let expected = [Coordinate3DM(tuple: (x: 1.0, y: 1.0, z: 1.0, m: 1.0))]

        geometry.append((x: 1.0, y: 1.0, z: 1.0, m: 1.0))
        
        XCTAssertTrue(geometry.elementsEqual(expected)
            { (lhs: Coordinate3DM, rhs: Coordinate3DM) -> Bool in
                return lhs == rhs
        }, "\(geometry) is not equal to \(expected)")
    }

    func testInsert() {
        var geometry = LineString<Coordinate3DM>(elements: [Coordinate3DM(tuple: (x: 1.0, y: 1.0, z: 1.0, m: 1.0)), Coordinate3DM(tuple: (x: 2.0, y: 2.0, z: 2.0, m: 2.0))], precision: precision, coordinateReferenceSystem: crs)
        let expected = [Coordinate3DM(tuple: (x: 2.0, y: 2.0, z: 2.0, m: 2.0)), Coordinate3DM(tuple: (x: 1.0, y: 1.0, z: 1.0, m: 1.0)), Coordinate3DM(tuple: (x: 2.0, y: 2.0, z: 2.0, m: 2.0))]

        geometry.insert(Coordinate3DM(tuple: (x: 2.0, y: 2.0, z: 2.0, m: 2.0)), atIndex: 0)

        XCTAssertTrue(geometry.elementsEqual(expected)
            { (lhs: Coordinate3DM, rhs: Coordinate3DM) -> Bool in
                return lhs == rhs
            }, "\(geometry) is not equal to \(expected)")
    }

    func testRemoveAll() {
        var geometry = LineString<Coordinate3DM>(elements: [Coordinate3DM(tuple: (x: 1.0, y: 1.0, z: 1.0, m: 1.0)), Coordinate3DM(tuple: (x: 2.0, y: 2.0, z: 2.0, m: 2.0))], precision: precision, coordinateReferenceSystem: crs)

        geometry.removeAll()

        XCTAssertEqual(geometry.isEmpty(), true)
    }
}

// MARK: - Coordinate2D, FixedPrecision, Cartesian -

class LineString_Coordinate2D_FixedPrecision_Cartesian_Tests : XCTestCase {

    let precision = FixedPrecision(scale: 100)
    let crs       = Cartesian()

    func testInit_NoArg()   {
        XCTAssertEqual(LineString<Coordinate2D>(precision: precision, coordinateReferenceSystem: crs).isEmpty, true)
    }
    
    func testInit_Tuple() {
        let geometry = LineString<Coordinate2D>(elements: [(x: 1.001, y: 1.001),(x: 2.002, y: 2.002)], precision: precision, coordinateReferenceSystem: crs)
        let expected = [Coordinate2D(tuple: (x: 1.0, y: 1.0)), Coordinate2D(tuple: (x: 2.0, y: 2.0))]

        XCTAssertTrue(
            (geometry.elementsEqual(expected)
                { (lhs: Coordinate2D, rhs: Coordinate2D) -> Bool in
                    return lhs == rhs
            }
        ), "\(geometry) is not equal to \(expected)")
    }
    
    func testSubscript_Get() {
        let geometry = LineString<Coordinate2D>(elements: [(x: 1.001, y: 1.001),(x: 2.002, y: 2.002)], precision: precision, coordinateReferenceSystem: crs)
        
        XCTAssertEqual(geometry[1], Coordinate2D(tuple: (x: 2.0, y: 2.0)))
    }
    
    func testSubscript_Set() {
        var geometry = LineString<Coordinate2D>(elements: [(x: 1.001, y: 1.001),(x: 2.002, y: 2.002)], precision: precision, coordinateReferenceSystem: crs)
        
        geometry[1] = Coordinate2D(tuple: (x: 1.001, y: 1.001))
        
        XCTAssertEqual(geometry[1], Coordinate2D(tuple: (x: 1.0, y: 1.0)))
    }
    
    func testAppend_LineString() {
        
        let geometry1 = LineString<Coordinate2D>(elements: [(x: 1.001, y: 1.001),(x: 2.002, y: 2.002)], precision: precision, coordinateReferenceSystem: crs)
        var geometry2 = LineString<Coordinate2D>(precision: precision, coordinateReferenceSystem: crs)
        
        geometry2.append(contentsOf: geometry1)
        
        XCTAssertEqual(geometry1, geometry2)
    }
    
    func testAppend_Array() {
        
        var geometry = LineString<Coordinate2D>(precision: precision, coordinateReferenceSystem: crs)
        let expected = [Coordinate2D(tuple: (x: 1.0, y: 1.0)), Coordinate2D(tuple: (x: 2.0, y: 2.0))]

        geometry.append(contentsOf: [Coordinate2D(tuple: (x: 1.001, y: 1.001)), Coordinate2D(tuple: (x: 2.002, y: 2.002))])
        
        XCTAssertTrue(geometry.elementsEqual(expected) { (lhs: Coordinate2D, rhs: Coordinate2D) -> Bool in
            return lhs == rhs
        }, "\(geometry) is not equal to \(expected)")
    }

    func testEquals() {
        XCTAssertEqual(LineString<Coordinate2D>(elements: [Coordinate2D(tuple: (x: 1.001, y: 1.001)), Coordinate2D(tuple: (x: 2.002, y: 2.002))], precision: precision, coordinateReferenceSystem: crs).equals(LineString<Coordinate2D>(elements: [Coordinate2D(tuple: (x: 1.0, y: 1.0)), Coordinate2D(tuple: (x: 2.0, y: 2.0))], precision: precision, coordinateReferenceSystem: crs)), true)
    }
    
    func testIsEmpty() {
        XCTAssertEqual(LineString<Coordinate2D>(precision: precision, coordinateReferenceSystem: crs).isEmpty(), true)
    }
    
    func testIsEmpty_False() {
        XCTAssertEqual(LineString<Coordinate2D>(elements: [Coordinate2D(tuple: (x: 1.001, y: 1.001)), Coordinate2D(tuple: (x: 2.002, y: 2.002))], precision: precision, coordinateReferenceSystem: crs).isEmpty(), false)
    }
    
    func testCount() {
        XCTAssertEqual(LineString<Coordinate2D>(elements: [Coordinate2D(tuple: (x: 1.001, y: 1.001)), Coordinate2D(tuple: (x: 2.002, y: 2.002))], precision: precision, coordinateReferenceSystem: crs).count, 2)
    }
    
    func testAppend() {
        var geometry = LineString<Coordinate2D>(precision: precision, coordinateReferenceSystem: crs)
        let expected = [Coordinate2D(tuple: (x: 1.0, y: 1.0))]

        geometry.append((x: 1.001, y: 1.001))
        
        XCTAssertTrue(geometry.elementsEqual(expected)
            { (lhs: Coordinate2D, rhs: Coordinate2D) -> Bool in
                return lhs == rhs
        }, "\(geometry) is not equal to \(expected)")
    }

    func testInsert() {
        var geometry = LineString<Coordinate2D>(elements: [Coordinate2D(tuple: (x: 1.001, y: 1.001)), Coordinate2D(tuple: (x: 2.002, y: 2.002))], precision: precision, coordinateReferenceSystem: crs)
        let expected = [Coordinate2D(tuple: (x: 2.0, y: 2.0)), Coordinate2D(tuple: (x: 1.0, y: 1.0)), Coordinate2D(tuple: (x: 2.0, y: 2.0))]

        geometry.insert(Coordinate2D(tuple: (x: 2.002, y: 2.002)), atIndex: 0)

        XCTAssertTrue(geometry.elementsEqual(expected)
            { (lhs: Coordinate2D, rhs: Coordinate2D) -> Bool in
                return lhs == rhs
            }, "\(geometry) is not equal to \(expected)")
    }

    func testRemoveAll() {
        var geometry = LineString<Coordinate2D>(elements: [Coordinate2D(tuple: (x: 1.001, y: 1.001)), Coordinate2D(tuple: (x: 2.002, y: 2.002))], precision: precision, coordinateReferenceSystem: crs)

        geometry.removeAll()

        XCTAssertEqual(geometry.isEmpty(), true)
    }
}

// MARK: - Coordinate2DM, FixedPrecision, Cartesian -

class LineString_Coordinate2DM_FixedPrecision_Cartesian_Tests : XCTestCase {

    let precision = FixedPrecision(scale: 100)
    let crs       = Cartesian()

    func testInit_NoArg()   {
        XCTAssertEqual(LineString<Coordinate2DM>(precision: precision, coordinateReferenceSystem: crs).isEmpty, true)
    }
    
    func testInit_Tuple() {
        let geometry = LineString<Coordinate2DM>(elements: [(x: 1.001, y: 1.001, m: 1.001),(x: 2.002, y: 2.002, m: 2.002)], precision: precision, coordinateReferenceSystem: crs)
        let expected = [Coordinate2DM(tuple: (x: 1.0, y: 1.0, m: 1.0)), Coordinate2DM(tuple: (x: 2.0, y: 2.0, m: 2.0))]

        XCTAssertTrue(
            (geometry.elementsEqual(expected)
                { (lhs: Coordinate2DM, rhs: Coordinate2DM) -> Bool in
                    return lhs == rhs
            }
        ), "\(geometry) is not equal to \(expected)")
    }
    
    func testSubscript_Get() {
        let geometry = LineString<Coordinate2DM>(elements: [(x: 1.001, y: 1.001, m: 1.001),(x: 2.002, y: 2.002, m: 2.002)], precision: precision, coordinateReferenceSystem: crs)
        
        XCTAssertEqual(geometry[1], Coordinate2DM(tuple: (x: 2.0, y: 2.0, m: 2.0)))
    }
    
    func testSubscript_Set() {
        var geometry = LineString<Coordinate2DM>(elements: [(x: 1.001, y: 1.001, m: 1.001),(x: 2.002, y: 2.002, m: 2.002)], precision: precision, coordinateReferenceSystem: crs)
        
        geometry[1] = Coordinate2DM(tuple: (x: 1.001, y: 1.001, m: 1.001))
        
        XCTAssertEqual(geometry[1], Coordinate2DM(tuple: (x: 1.0, y: 1.0, m: 1.0)))
    }
    
    func testAppend_LineString() {
        
        let geometry1 = LineString<Coordinate2DM>(elements: [(x: 1.001, y: 1.001, m: 1.001),(x: 2.002, y: 2.002, m: 2.002)], precision: precision, coordinateReferenceSystem: crs)
        var geometry2 = LineString<Coordinate2DM>(precision: precision, coordinateReferenceSystem: crs)
        
        geometry2.append(contentsOf: geometry1)
        
        XCTAssertEqual(geometry1, geometry2)
    }
    
    func testAppend_Array() {
        
        var geometry = LineString<Coordinate2DM>(precision: precision, coordinateReferenceSystem: crs)
        let expected = [Coordinate2DM(tuple: (x: 1.0, y: 1.0, m: 1.0)), Coordinate2DM(tuple: (x: 2.0, y: 2.0, m: 2.0))]

        geometry.append(contentsOf: [Coordinate2DM(tuple: (x: 1.001, y: 1.001, m: 1.001)), Coordinate2DM(tuple: (x: 2.002, y: 2.002, m: 2.002))])
        
        XCTAssertTrue(geometry.elementsEqual(expected) { (lhs: Coordinate2DM, rhs: Coordinate2DM) -> Bool in
            return lhs == rhs
        }, "\(geometry) is not equal to \(expected)")
    }

    func testEquals() {
        XCTAssertEqual(LineString<Coordinate2DM>(elements: [Coordinate2DM(tuple: (x: 1.001, y: 1.001, m: 1.001)), Coordinate2DM(tuple: (x: 2.002, y: 2.002, m: 2.002))], precision: precision, coordinateReferenceSystem: crs).equals(LineString<Coordinate2DM>(elements: [Coordinate2DM(tuple: (x: 1.0, y: 1.0, m: 1.0)), Coordinate2DM(tuple: (x: 2.0, y: 2.0, m: 2.0))], precision: precision, coordinateReferenceSystem: crs)), true)
    }
    
    func testIsEmpty() {
        XCTAssertEqual(LineString<Coordinate2DM>(precision: precision, coordinateReferenceSystem: crs).isEmpty(), true)
    }
    
    func testIsEmpty_False() {
        XCTAssertEqual(LineString<Coordinate2DM>(elements: [Coordinate2DM(tuple: (x: 1.001, y: 1.001, m: 1.001)), Coordinate2DM(tuple: (x: 2.002, y: 2.002, m: 2.002))], precision: precision, coordinateReferenceSystem: crs).isEmpty(), false)
    }
    
    func testCount() {
        XCTAssertEqual(LineString<Coordinate2DM>(elements: [Coordinate2DM(tuple: (x: 1.001, y: 1.001, m: 1.001)), Coordinate2DM(tuple: (x: 2.002, y: 2.002, m: 2.002))], precision: precision, coordinateReferenceSystem: crs).count, 2)
    }
    
    func testAppend() {
        var geometry = LineString<Coordinate2DM>(precision: precision, coordinateReferenceSystem: crs)
        let expected = [Coordinate2DM(tuple: (x: 1.0, y: 1.0, m: 1.0))]

        geometry.append((x: 1.001, y: 1.001, m: 1.001))
        
        XCTAssertTrue(geometry.elementsEqual(expected)
            { (lhs: Coordinate2DM, rhs: Coordinate2DM) -> Bool in
                return lhs == rhs
        }, "\(geometry) is not equal to \(expected)")
    }

    func testInsert() {
        var geometry = LineString<Coordinate2DM>(elements: [Coordinate2DM(tuple: (x: 1.001, y: 1.001, m: 1.001)), Coordinate2DM(tuple: (x: 2.002, y: 2.002, m: 2.002))], precision: precision, coordinateReferenceSystem: crs)
        let expected = [Coordinate2DM(tuple: (x: 2.0, y: 2.0, m: 2.0)), Coordinate2DM(tuple: (x: 1.0, y: 1.0, m: 1.0)), Coordinate2DM(tuple: (x: 2.0, y: 2.0, m: 2.0))]

        geometry.insert(Coordinate2DM(tuple: (x: 2.002, y: 2.002, m: 2.002)), atIndex: 0)

        XCTAssertTrue(geometry.elementsEqual(expected)
            { (lhs: Coordinate2DM, rhs: Coordinate2DM) -> Bool in
                return lhs == rhs
            }, "\(geometry) is not equal to \(expected)")
    }

    func testRemoveAll() {
        var geometry = LineString<Coordinate2DM>(elements: [Coordinate2DM(tuple: (x: 1.001, y: 1.001, m: 1.001)), Coordinate2DM(tuple: (x: 2.002, y: 2.002, m: 2.002))], precision: precision, coordinateReferenceSystem: crs)

        geometry.removeAll()

        XCTAssertEqual(geometry.isEmpty(), true)
    }
}

// MARK: - Coordinate3D, FixedPrecision, Cartesian -

class LineString_Coordinate3D_FixedPrecision_Cartesian_Tests : XCTestCase {

    let precision = FixedPrecision(scale: 100)
    let crs       = Cartesian()

    func testInit_NoArg()   {
        XCTAssertEqual(LineString<Coordinate3D>(precision: precision, coordinateReferenceSystem: crs).isEmpty, true)
    }
    
    func testInit_Tuple() {
        let geometry = LineString<Coordinate3D>(elements: [(x: 1.001, y: 1.001, z: 1.001),(x: 2.002, y: 2.002, z: 2.002)], precision: precision, coordinateReferenceSystem: crs)
        let expected = [Coordinate3D(tuple: (x: 1.0, y: 1.0, z: 1.0)), Coordinate3D(tuple: (x: 2.0, y: 2.0, z: 2.0))]

        XCTAssertTrue(
            (geometry.elementsEqual(expected)
                { (lhs: Coordinate3D, rhs: Coordinate3D) -> Bool in
                    return lhs == rhs
            }
        ), "\(geometry) is not equal to \(expected)")
    }
    
    func testSubscript_Get() {
        let geometry = LineString<Coordinate3D>(elements: [(x: 1.001, y: 1.001, z: 1.001),(x: 2.002, y: 2.002, z: 2.002)], precision: precision, coordinateReferenceSystem: crs)
        
        XCTAssertEqual(geometry[1], Coordinate3D(tuple: (x: 2.0, y: 2.0, z: 2.0)))
    }
    
    func testSubscript_Set() {
        var geometry = LineString<Coordinate3D>(elements: [(x: 1.001, y: 1.001, z: 1.001),(x: 2.002, y: 2.002, z: 2.002)], precision: precision, coordinateReferenceSystem: crs)
        
        geometry[1] = Coordinate3D(tuple: (x: 1.001, y: 1.001, z: 1.001))
        
        XCTAssertEqual(geometry[1], Coordinate3D(tuple: (x: 1.0, y: 1.0, z: 1.0)))
    }
    
    func testAppend_LineString() {
        
        let geometry1 = LineString<Coordinate3D>(elements: [(x: 1.001, y: 1.001, z: 1.001),(x: 2.002, y: 2.002, z: 2.002)], precision: precision, coordinateReferenceSystem: crs)
        var geometry2 = LineString<Coordinate3D>(precision: precision, coordinateReferenceSystem: crs)
        
        geometry2.append(contentsOf: geometry1)
        
        XCTAssertEqual(geometry1, geometry2)
    }
    
    func testAppend_Array() {
        
        var geometry = LineString<Coordinate3D>(precision: precision, coordinateReferenceSystem: crs)
        let expected = [Coordinate3D(tuple: (x: 1.0, y: 1.0, z: 1.0)), Coordinate3D(tuple: (x: 2.0, y: 2.0, z: 2.0))]

        geometry.append(contentsOf: [Coordinate3D(tuple: (x: 1.001, y: 1.001, z: 1.001)), Coordinate3D(tuple: (x: 2.002, y: 2.002, z: 2.002))])
        
        XCTAssertTrue(geometry.elementsEqual(expected) { (lhs: Coordinate3D, rhs: Coordinate3D) -> Bool in
            return lhs == rhs
        }, "\(geometry) is not equal to \(expected)")
    }

    func testEquals() {
        XCTAssertEqual(LineString<Coordinate3D>(elements: [Coordinate3D(tuple: (x: 1.001, y: 1.001, z: 1.001)), Coordinate3D(tuple: (x: 2.002, y: 2.002, z: 2.002))], precision: precision, coordinateReferenceSystem: crs).equals(LineString<Coordinate3D>(elements: [Coordinate3D(tuple: (x: 1.0, y: 1.0, z: 1.0)), Coordinate3D(tuple: (x: 2.0, y: 2.0, z: 2.0))], precision: precision, coordinateReferenceSystem: crs)), true)
    }
    
    func testIsEmpty() {
        XCTAssertEqual(LineString<Coordinate3D>(precision: precision, coordinateReferenceSystem: crs).isEmpty(), true)
    }
    
    func testIsEmpty_False() {
        XCTAssertEqual(LineString<Coordinate3D>(elements: [Coordinate3D(tuple: (x: 1.001, y: 1.001, z: 1.001)), Coordinate3D(tuple: (x: 2.002, y: 2.002, z: 2.002))], precision: precision, coordinateReferenceSystem: crs).isEmpty(), false)
    }
    
    func testCount() {
        XCTAssertEqual(LineString<Coordinate3D>(elements: [Coordinate3D(tuple: (x: 1.001, y: 1.001, z: 1.001)), Coordinate3D(tuple: (x: 2.002, y: 2.002, z: 2.002))], precision: precision, coordinateReferenceSystem: crs).count, 2)
    }
    
    func testAppend() {
        var geometry = LineString<Coordinate3D>(precision: precision, coordinateReferenceSystem: crs)
        let expected = [Coordinate3D(tuple: (x: 1.0, y: 1.0, z: 1.0))]

        geometry.append((x: 1.001, y: 1.001, z: 1.001))
        
        XCTAssertTrue(geometry.elementsEqual(expected)
            { (lhs: Coordinate3D, rhs: Coordinate3D) -> Bool in
                return lhs == rhs
        }, "\(geometry) is not equal to \(expected)")
    }

    func testInsert() {
        var geometry = LineString<Coordinate3D>(elements: [Coordinate3D(tuple: (x: 1.001, y: 1.001, z: 1.001)), Coordinate3D(tuple: (x: 2.002, y: 2.002, z: 2.002))], precision: precision, coordinateReferenceSystem: crs)
        let expected = [Coordinate3D(tuple: (x: 2.0, y: 2.0, z: 2.0)), Coordinate3D(tuple: (x: 1.0, y: 1.0, z: 1.0)), Coordinate3D(tuple: (x: 2.0, y: 2.0, z: 2.0))]

        geometry.insert(Coordinate3D(tuple: (x: 2.002, y: 2.002, z: 2.002)), atIndex: 0)

        XCTAssertTrue(geometry.elementsEqual(expected)
            { (lhs: Coordinate3D, rhs: Coordinate3D) -> Bool in
                return lhs == rhs
            }, "\(geometry) is not equal to \(expected)")
    }

    func testRemoveAll() {
        var geometry = LineString<Coordinate3D>(elements: [Coordinate3D(tuple: (x: 1.001, y: 1.001, z: 1.001)), Coordinate3D(tuple: (x: 2.002, y: 2.002, z: 2.002))], precision: precision, coordinateReferenceSystem: crs)

        geometry.removeAll()

        XCTAssertEqual(geometry.isEmpty(), true)
    }
}

// MARK: - Coordinate3DM, FixedPrecision, Cartesian -

class LineString_Coordinate3DM_FixedPrecision_Cartesian_Tests : XCTestCase {

    let precision = FixedPrecision(scale: 100)
    let crs       = Cartesian()

    func testInit_NoArg()   {
        XCTAssertEqual(LineString<Coordinate3DM>(precision: precision, coordinateReferenceSystem: crs).isEmpty, true)
    }
    
    func testInit_Tuple() {
        let geometry = LineString<Coordinate3DM>(elements: [(x: 1.001, y: 1.001, z: 1.001, m: 1.001),(x: 2.002, y: 2.002, z: 2.002, m: 2.002)], precision: precision, coordinateReferenceSystem: crs)
        let expected = [Coordinate3DM(tuple: (x: 1.0, y: 1.0, z: 1.0, m: 1.0)), Coordinate3DM(tuple: (x: 2.0, y: 2.0, z: 2.0, m: 2.0))]

        XCTAssertTrue(
            (geometry.elementsEqual(expected)
                { (lhs: Coordinate3DM, rhs: Coordinate3DM) -> Bool in
                    return lhs == rhs
            }
        ), "\(geometry) is not equal to \(expected)")
    }
    
    func testSubscript_Get() {
        let geometry = LineString<Coordinate3DM>(elements: [(x: 1.001, y: 1.001, z: 1.001, m: 1.001),(x: 2.002, y: 2.002, z: 2.002, m: 2.002)], precision: precision, coordinateReferenceSystem: crs)
        
        XCTAssertEqual(geometry[1], Coordinate3DM(tuple: (x: 2.0, y: 2.0, z: 2.0, m: 2.0)))
    }
    
    func testSubscript_Set() {
        var geometry = LineString<Coordinate3DM>(elements: [(x: 1.001, y: 1.001, z: 1.001, m: 1.001),(x: 2.002, y: 2.002, z: 2.002, m: 2.002)], precision: precision, coordinateReferenceSystem: crs)
        
        geometry[1] = Coordinate3DM(tuple: (x: 1.001, y: 1.001, z: 1.001, m: 1.001))
        
        XCTAssertEqual(geometry[1], Coordinate3DM(tuple: (x: 1.0, y: 1.0, z: 1.0, m: 1.0)))
    }
    
    func testAppend_LineString() {
        
        let geometry1 = LineString<Coordinate3DM>(elements: [(x: 1.001, y: 1.001, z: 1.001, m: 1.001),(x: 2.002, y: 2.002, z: 2.002, m: 2.002)], precision: precision, coordinateReferenceSystem: crs)
        var geometry2 = LineString<Coordinate3DM>(precision: precision, coordinateReferenceSystem: crs)
        
        geometry2.append(contentsOf: geometry1)
        
        XCTAssertEqual(geometry1, geometry2)
    }
    
    func testAppend_Array() {
        
        var geometry = LineString<Coordinate3DM>(precision: precision, coordinateReferenceSystem: crs)
        let expected = [Coordinate3DM(tuple: (x: 1.0, y: 1.0, z: 1.0, m: 1.0)), Coordinate3DM(tuple: (x: 2.0, y: 2.0, z: 2.0, m: 2.0))]

        geometry.append(contentsOf: [Coordinate3DM(tuple: (x: 1.001, y: 1.001, z: 1.001, m: 1.001)), Coordinate3DM(tuple: (x: 2.002, y: 2.002, z: 2.002, m: 2.002))])
        
        XCTAssertTrue(geometry.elementsEqual(expected) { (lhs: Coordinate3DM, rhs: Coordinate3DM) -> Bool in
            return lhs == rhs
        }, "\(geometry) is not equal to \(expected)")
    }

    func testEquals() {
        XCTAssertEqual(LineString<Coordinate3DM>(elements: [Coordinate3DM(tuple: (x: 1.001, y: 1.001, z: 1.001, m: 1.001)), Coordinate3DM(tuple: (x: 2.002, y: 2.002, z: 2.002, m: 2.002))], precision: precision, coordinateReferenceSystem: crs).equals(LineString<Coordinate3DM>(elements: [Coordinate3DM(tuple: (x: 1.0, y: 1.0, z: 1.0, m: 1.0)), Coordinate3DM(tuple: (x: 2.0, y: 2.0, z: 2.0, m: 2.0))], precision: precision, coordinateReferenceSystem: crs)), true)
    }
    
    func testIsEmpty() {
        XCTAssertEqual(LineString<Coordinate3DM>(precision: precision, coordinateReferenceSystem: crs).isEmpty(), true)
    }
    
    func testIsEmpty_False() {
        XCTAssertEqual(LineString<Coordinate3DM>(elements: [Coordinate3DM(tuple: (x: 1.001, y: 1.001, z: 1.001, m: 1.001)), Coordinate3DM(tuple: (x: 2.002, y: 2.002, z: 2.002, m: 2.002))], precision: precision, coordinateReferenceSystem: crs).isEmpty(), false)
    }
    
    func testCount() {
        XCTAssertEqual(LineString<Coordinate3DM>(elements: [Coordinate3DM(tuple: (x: 1.001, y: 1.001, z: 1.001, m: 1.001)), Coordinate3DM(tuple: (x: 2.002, y: 2.002, z: 2.002, m: 2.002))], precision: precision, coordinateReferenceSystem: crs).count, 2)
    }
    
    func testAppend() {
        var geometry = LineString<Coordinate3DM>(precision: precision, coordinateReferenceSystem: crs)
        let expected = [Coordinate3DM(tuple: (x: 1.0, y: 1.0, z: 1.0, m: 1.0))]

        geometry.append((x: 1.001, y: 1.001, z: 1.001, m: 1.001))
        
        XCTAssertTrue(geometry.elementsEqual(expected)
            { (lhs: Coordinate3DM, rhs: Coordinate3DM) -> Bool in
                return lhs == rhs
        }, "\(geometry) is not equal to \(expected)")
    }

    func testInsert() {
        var geometry = LineString<Coordinate3DM>(elements: [Coordinate3DM(tuple: (x: 1.001, y: 1.001, z: 1.001, m: 1.001)), Coordinate3DM(tuple: (x: 2.002, y: 2.002, z: 2.002, m: 2.002))], precision: precision, coordinateReferenceSystem: crs)
        let expected = [Coordinate3DM(tuple: (x: 2.0, y: 2.0, z: 2.0, m: 2.0)), Coordinate3DM(tuple: (x: 1.0, y: 1.0, z: 1.0, m: 1.0)), Coordinate3DM(tuple: (x: 2.0, y: 2.0, z: 2.0, m: 2.0))]

        geometry.insert(Coordinate3DM(tuple: (x: 2.002, y: 2.002, z: 2.002, m: 2.002)), atIndex: 0)

        XCTAssertTrue(geometry.elementsEqual(expected)
            { (lhs: Coordinate3DM, rhs: Coordinate3DM) -> Bool in
                return lhs == rhs
            }, "\(geometry) is not equal to \(expected)")
    }

    func testRemoveAll() {
        var geometry = LineString<Coordinate3DM>(elements: [Coordinate3DM(tuple: (x: 1.001, y: 1.001, z: 1.001, m: 1.001)), Coordinate3DM(tuple: (x: 2.002, y: 2.002, z: 2.002, m: 2.002))], precision: precision, coordinateReferenceSystem: crs)

        geometry.removeAll()

        XCTAssertEqual(geometry.isEmpty(), true)
    }
}


