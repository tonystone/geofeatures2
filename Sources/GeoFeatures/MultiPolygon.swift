///
///  MultiPolygon.swift
///
///  Copyright (c) 2016 Tony Stone
///
///  Licensed under the Apache License, Version 2.0 (the "License");
///  you may not use this file except in compliance with the License.
///  You may obtain a copy of the License at
///
///  http://www.apache.org/licenses/LICENSE-2.0
///
///  Unless required by applicable law or agreed to in writing, software
///  distributed under the License is distributed on an "AS IS" BASIS,
///  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
///  See the License for the specific language governing permissions and
///  limitations under the License.
///
///  Created by Tony Stone on 2/14/2016.
///
import Swift

///
/// NOTE: This file was auto generated by gyb from file GeometryCollection.swift.gyb using the following command.
///
///     ~/gyb --line-directive '' -DSelf=MultiPolygon -DElement=Polygon -o MultiPolygon.swift GeometryCollection.swift.gyb
///
/// Do NOT edit this file directly as it will be regenerated automatically when needed.
///

///
/// MultiPolygon
///
/// A MultiPolygon is a collection of some number of Polygon objects.
///
/// All the elements in a MultiPolygon shall be in the same Spatial Reference System. This is also the Spatial Reference System for the MultiPolygon.
///
public struct MultiPolygon {

    public let precision: Precision
    public let coordinateSystem: CoordinateSystem

    ///
    /// Construct an empty `MultiPolygon`.
    ///
    /// - parameters:
    ///     - precision: The `Precision` model this `MultiPolygon` should use in calculations on it's coordinates.
    ///     - coordinateSystem: The 'CoordinateSystem` this `MultiPolygon` should use in calculations on it's coordinates.
    ///
    /// - seealso: `CoordinateSystem`
    /// - seealso: `Precision`
    ///
    public init(precision: Precision = defaultPrecision, coordinateSystem: CoordinateSystem = defaultCoordinateSystem) {
        self.init(elements: [] as [Polygon], precision: precision, coordinateSystem: coordinateSystem)
    }

    ///
    /// Construct a `MultiPolygon` from a any `Collection` type which holds `Element` objects.
    ///
    /// MultiPolygon can be constructed from any Swift.Collection type as
    /// long as it has an Element type equal the Geometry type specified in Element.
    ///
    /// - parameters:
    ///     - elements: A `Collection` of `Element`s.
    ///     - precision: The `Precision` model this `MultiPolygon` should use in calculations on it's coordinates.
    ///     - coordinateSystem: The 'CoordinateSystem` this `MultiPolygon` should use in calculations on it's coordinates.
    ///
    /// - seealso: `CoordinateSystem`
    /// - seealso: `Precision`
    ///
    public init<C: Swift.Collection>(elements: C, precision: Precision = defaultPrecision, coordinateSystem: CoordinateSystem = defaultCoordinateSystem)
            where C.Element == Polygon {

        self.precision = precision
        self.coordinateSystem = coordinateSystem

        /// We create a new instance of the Polygon so we can adjust the precision and Coordinate reference system of the Polygon before adding.
        self.elements = elements.map({ Polygon(other: $0, precision: precision, coordinateSystem: coordinateSystem) })
    }

    internal private(set) var elements: [Polygon]
}

// MARK: - Copy Construction

internal extension MultiPolygon {

    ///
    /// Construct a MultiPolygon from another MultiPolygon (copy constructor) changing the precision and coordinateSystem.
    ///
    /// - parameters:
    ///     - other: The MultiPolygon of the same type that you want to construct a new MultiPolygon from.
    ///     - precision: Optionally change the `Precision` model this `MultiPolygon` should use in calculations on it's coordinates.
    ///     - coordinateSystem: Optionally change the 'CoordinateSystem` this `MultiPolygon` should use in calculations on it's coordinates.
    ///
    /// - seealso: `CoordinateSystem`
    /// - seealso: `Precision`
    ///
    internal init(other: MultiPolygon, precision: Precision, coordinateSystem: CoordinateSystem) {
        self.init(elements: other.elements, precision: precision, coordinateSystem: coordinateSystem)
    }
}

// MARK: - Collection conformance

extension MultiPolygon: Collection, MutableCollection {

    ///
    /// Returns the position immediately after `i`.
    ///
    /// - Precondition: `(startIndex..<endIndex).contains(i)`
    ///
    public func index(after i: Int) -> Int {
        return i+1
    }

    ///
    /// Always zero, which is the index of the first element when non-empty.
    ///
    public var startIndex: Int {
       return 0
    }

    ///
    /// A "past-the-end" element index; the successor of the last valid subscript argument.
    ///
    public var endIndex: Int {
        return elements.count
    }

    public subscript(index: Int) -> Polygon {
        get {
            /// Note: we rely on the array to return an error for any index out of range.
            return elements[index]
        }
        set (newElement) {
            /// Note: we rely on the array to return an error for any index out of range.
            /// We create a new instance of the Polygon so we can adjust the precision and Coordinate reference system of the Polygon before adding.
            self.elements[index] = Polygon(other: newElement, precision: self.precision, coordinateSystem: self.coordinateSystem)
        }
    }

    ///
    /// Append `newElement` to MultiPolygon.
    ///
    public mutating func append(_ newElement: Polygon) {

        /// We create a new instance of the Polygon so we can adjust the precision and Coordinate reference system of the Polygon before adding.
        self.elements.append(Polygon(other: newElement, precision: self.precision, coordinateSystem: self.coordinateSystem))
    }

    ///
    /// Append the elements of `newElements` to this MultiPolygon.
    ///
    public mutating func append<C: Swift.Collection>(contentsOf newElements: C)
            where C.Element == Polygon {

        var Iterator = newElements.makeIterator()

        while let element = Iterator.next() {
            self.append(element)
        }
    }

    ///
    /// Insert `newElement` at index `i` of this MultiPolygon.
    ///
    /// - Requires: `i <= count`.
    ///
    public mutating func insert(_ newElement: Polygon, at index: Int) {

        /// We create a new instance of the Polygon so we can adjust the precision and Coordinate reference system of the Polygon before adding.
        self.elements.insert(Polygon(other: newElement, precision: self.precision, coordinateSystem: self.coordinateSystem), at: index)
    }
}

// MARK: CustomStringConvertible & CustomDebugStringConvertible protocol conformance

extension MultiPolygon: CustomStringConvertible, CustomDebugStringConvertible {

    public var description: String {
        return "\(type(of: self))(\(self.map { String(describing: $0) }.joined(separator: ", ")))"
    }

    public var debugDescription: String {
        return self.description
    }
}

// MARK: - Equatable Conformance

extension MultiPolygon: Equatable {
    static public func == (lhs: MultiPolygon, rhs: MultiPolygon) -> Bool {
        return lhs.equals(rhs)
    }
}


